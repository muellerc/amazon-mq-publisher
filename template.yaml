AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  AmazonMQBrokerUserName:
    Type: String
    Default: AmazonMQBrokerUserName
    Description: The name of the Amazon MQ broker user.

  AmazonMQBrokerPassword:
    Type: String
    Default: AmazonMQBrokerPassword
    Description: The password of the Amazon MQ broker user.

Resources:
  ##################################################
  ##############  AWS NETWORK SET UP  ##############
  ##################################################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.11.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Join [ ':', [ !Ref 'AWS::StackName', 'VPC' ] ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ ':', [ !Ref 'AWS::StackName', 'InternetGateway' ] ]

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ ':', [ !Ref 'AWS::StackName', 'RouteTable' ] ]

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.11.0.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet1' ] ]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.11.1.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet2' ] ]

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  ##################################################
  ###########  BACKEND AMAZON MQ BROKER  ###########
  ##################################################

  AmazonMQSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits security group ingress and egress traffic for the Amazon MQ instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8162
          ToPort: 8162
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 61617
          ToPort: 61617
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 61614
          ToPort: 61614
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8883
          ToPort: 8883
          CidrIp: 0.0.0.0/0

  AmazonMQBroker:
    Type: AWS::AmazonMQ::Broker
    Properties:
      AutoMinorVersionUpgrade: false
      BrokerName: AmazonMQBroker
      DeploymentMode: ACTIVE_STANDBY_MULTI_AZ
      EngineType: ActiveMQ
      EngineVersion: 5.15.9
      HostInstanceType: mq.m5.large
      Logs:
        General: true
        Audit: true
      PubliclyAccessible: true
      SecurityGroups:
        - !Ref AmazonMQSecurityGroup
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Users:
        -
          ConsoleAccess: true
          Groups:
            - Admin
          Password:
            Ref: AmazonMQBrokerPassword
          Username:
            Ref: AmazonMQBrokerUserName

  ##################################################
  ##  BACKEND MICROSERVICES BASED ON AWS FARGATE  ##
  ##################################################

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits security group ingress and egress traffic for the Fargate task
      VpcId: !Ref VPC

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: edf-energy-cluster

  MessagingServiceECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: messaging-service-task
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: messaging-service-task
          Cpu: 512
          Memory: 1024
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/amazon-mq-publisher:latest'
          Environment:
            - Name: BROKER_URL
              Value: !Sub 'failover:(ssl://${AmazonMQBroker}-1.mq.${AWS::Region}.amazonaws.com:61617,ssl://${AmazonMQBroker}-2.mq.${AWS::Region}.amazonaws.com:61617)'
            - Name: BROKER_USER
              Value: !Ref AmazonMQBrokerUserName
            - Name: BROKER_PASSWORD
              Value: !Ref AmazonMQBrokerPassword
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MessagingCloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: messaging-service

  MessagingServiceECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: messaging-service-service
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED # to be able to download images from ECR
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      TaskDefinition: !Ref MessagingServiceECSTaskDefinition

  MessagingCloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: ecs/messaging/amazon-mq-publisher
      RetentionInDays: 30

Outputs:
  VPCRef:
    Description: The reference to the created VPC.
    Value: !Ref VPC
    Export:
      Name: !Sub 'MESSAGING-SERVICE:VPC'

  PublicSubnet1Ref:
    Description: The reference to the created public subnet 1.
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub 'MESSAGING-SERVICE:PublicSubnet1'

  PublicSubnet2Ref:
    Description: The reference to the created public subnet 2.
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub 'MESSAGING-SERVICE:PublicSubnet2'

  AmazonMQBrokerUserNameRef:
    Description: The reference to the Amazon MQ broker user name.
    Value: !Ref AmazonMQBrokerUserName
    Export:
      Name: !Sub 'MESSAGING-SERVICE:AmazonMQBrokerUserName'

  AmazonMQBrokerPasswordRef:
    Description: The reference to the Amazon MQ broker user password.
    Value: !Ref AmazonMQBrokerPassword
    Export:
      Name: !Sub 'MESSAGING-SERVICE:AmazonMQBrokerPassword'

  AmazonMQBrokerURLRef:
    Description: The reference to the Amazon MQ broker OpenWire URL.
    Value: !Sub 'failover:(ssl://${AmazonMQBroker}-1.mq.${AWS::Region}.amazonaws.com:61617,ssl://${AmazonMQBroker}-2.mq.${AWS::Region}.amazonaws.com:61617)'
    Export:
      Name: !Sub 'MESSAGING-SERVICE:AmazonMQBrokerURL'
